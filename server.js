var express = require('express');
var bodyParser = require('body-parser');
var anyDB = require('any-db');
var colors = require('colors');
var engines = require('consolidate');
var app = express();
var conn = anyDB.createConnection('sqlite3://chatroom.db');

app.engine('html', engines.hogan);
app.set('views', __dirname + '/templates');
app.set('view engine', 'html');

// set of existing identifiers for quick check of whether an identifier already exists
var existingRooms = new Set();

var messageQuery = 'CREATE TABLE IF NOT EXISTS message (id INTEGER PRIMARY KEY AUTOINCREMENT, room TEXT, nickname TEXT, body TEXT, time INTEGER)';
var roomQuery = 'CREATE TABLE IF NOT EXISTS room (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)';

// create message table
conn.query(messageQuery, function(error, data) {
    if (error != null)
        console.error(error);
});

// create room table
conn.query(roomQuery, function(error, data) {
    if (error != null)
        console.error(error);
});

// bodyparser setup
app.use(bodyParser.urlencoded({extended:false}));
app.use(bodyParser.json());

// setup static resources (css, js, images)
app.use(express.static(__dirname + '/public'));

// clear and close database and end process on SIGINT
process.on('SIGINT', function() {
    closeProgram();
});

// post message to the server
app.post('/:roomName/messages', saveMessage);

// get all messages that belong to the room identified by the roomName
app.get('/:roomName/messages', processResult);

// path to retrieve a list of all previously active rooms
app.get('/previous', fetchPrevActive);

// path to retrieve a unique identifier to identify a new chatroom
app.get('/chatroom', function(request, response) {
    console.log('Request received:', request.method.cyan, request.url.underline);
    // generate identifier
    var identifier = generateRoomIdentifier();
    response.json({room: identifier});
});

// a specific chatroom identified by roomName
app.get('/:roomName', function(request, response) {
    console.log('Request received:', request.method.cyan, request.url.underline);
    // inserting room identifier into database here instead of when the identifier is generated
    // handles the case where an user enters a room whose roomName is not generated by the homepage link
    recordRoom(request.params.roomName);
    response.render('room.html', {roomName: request.params.roomName});
});

// home page
app.get('/', function(request, response) {
    console.log('Request received:', request.method.cyan, request.url.underline);
    response.sendFile(__dirname + "/home.html");
});

// 404 page for everything else
app.get('*', function(request, response) {
    console.log('- Request received:', request.method.cyan, request.url.underline);
    response.status(404).type('html');
    response.write('<h1> Error: 404 </h1>');
    response.end();
});

/*
 * Insert room identifier into the room table if the room has not been visited before
 */
function recordRoom(name) {
    checkIfRoomExists(name, function() {
        conn.query("INSERT INTO room VALUES($1, $2)", [null, name], function(error, data) {
            if (error != null) console.error(error);
        });
        existingRooms.add(name);
    });
}

/*
 * Clear the message and room tables and close the database before exiting the
 * process
 */
function closeProgram() {
    conn.query('DELETE FROM message', function(error, data) {
        if (error != null)
            console.error(error)
        else
            console.log("message data deleted");
    });
    conn.query('DELETE FROM room', function(error, data) {
        if (error != null)
            console.error(error)
        else
            console.log("room data deleted");
    });
    conn.end(function() {
        console.log('Process and connection closing...');
        process.exit(0);
    });
}

/*
 * Insert message from POST request into the database (each message is represented
 * by the name of the room, a nickname chosen by the user, the message itself, and
 * the time at which the message is sent)
 */
function saveMessage(request, response){
    console.log('Request received:', request.method.cyan, request.url.underline);
    // get parameters from URL
    var name = request.params.roomName;
    var nickname = request.body.nickname;
    var message = request.body.message;
    var time = request.body.time;
    // insert into table
    conn.query('INSERT INTO message VALUES($1, $2, $3, $4, $5)', [null, name, nickname, message, time], function(error, data) {
        if (error != null) console.error(error);
    });
    response.json({status:"ok"});
}

/*
 * Get all room identifiers in the room table and send it to the client
 */
function fetchPrevActive(request, response) {
    console.log('Request received:', request.method.cyan, request.url.underline);
    conn.query('SELECT * FROM room', function(error, data){
        if (error != null) console.error(error);
        var rows = data.rows;
        response.json({data: rows});
    });
}

/*
 * Check if a room has been entered before, if not, execute callback
 */
function checkIfRoomExists(room, callback) {
    var con = conn.query('SELECT * FROM room', function(error, data){
        if (error != null) console.error(error);
        var rows = data.rows;
        for (var i = 0; i < rows.length; i++) {
            if (rows[i].name === room) {
                return true;
            }
        }
        callback();
    });
}

/*
 * Send all messages in the database that belongs to the current room to the client
 */
function processResult(request, response) {
    console.log('Request received:', request.method.cyan, request.url.underline);
    var sql = 'SELECT nickname, body, time FROM message WHERE room=$1 ORDER BY time ASC';
    var q = conn.query(sql, [request.params.roomName], function(error,data) {
        if (error != null) console.error(error);
        var results = data.rows;
        response.json({data: results});
    });
}

/*
 * Generate a random 6-character alphanumeric identifier to uniquely identify a chatroom
 */
function generateRoomIdentifier() {
    var chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
    var result = '';
    for (var i = 0; i < 6; i++) {
        result += chars.charAt(Math.floor(Math.random()*chars.length));
    }
    // if the first id generated already exists, generate new id until a unique one is found
    while (existingRooms.has(result)) {
        for (var i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random()*chars.length));
        }
    }
    return result;
}

app.listen(8080);
